generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Baja {
  id        String   @id @default(uuid())
  fecha     DateTime
  motivo    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  editor_id String?
  people_id String
  user_id   String
  editor    User?    @relation("baja_editor_user_id", fields: [editor_id], references: [id])
  persona   Persona  @relation("baja_persona_id", fields: [people_id], references: [id])
  autor     User     @relation("baja_autor_user_id", fields: [user_id], references: [id])

  @@map("bajas")
}

model Barrio {
  id                 Int            @id @default(autoincrement())
  name               String         @unique @db.VarChar(60)
  municipio_id       Int
  zona_geografica_id Int
  municipio          Municipio      @relation("barrio_municipio_id", fields: [municipio_id], references: [id])
  zonaGeografica     ZonaGeografica @relation(fields: [zona_geografica_id], references: [id])
  personas           Persona[]      @relation("persona_barrio_id")

  @@map("barrios")
}

model Categoria {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]

  @@map("categorias")
}

model Departamento {
  id         Int         @id @default(autoincrement())
  name       String      @unique @db.VarChar(60)
  pais_id    Int
  pais       Pais        @relation(fields: [pais_id], references: [id])
  municipios Municipio[]

  @@map("departamentos")
}

model Estado {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(20)

  @@map("estados")
}

model EstadoCivil {
  id           Int       @id @default(autoincrement())
  estado_civil String    @unique
  personas     Persona[]

  @@map("estados_civiles")
}

model Evento {
  id                     String                @id @default(uuid())
  title                  String
  description            String?
  date                   DateTime
  location               String
  created_at             DateTime              @default(now())
  updated_at             DateTime              @updatedAt
  deleted_at             DateTime?
  user_id                String
  user_edit_id           String
  iglesia_id             String
  tipo_evento_id         Int
  iglesiaId              String?
  tipoEventoId           Int?
  Iglesia                Iglesia?              @relation(fields: [iglesiaId], references: [id])
  iglesias               Iglesia               @relation("evento_iglesia_id", fields: [iglesia_id], references: [id])
  TipoEvento             TipoEvento?           @relation(fields: [tipoEventoId], references: [id])
  tipos_evento           TipoEvento            @relation("evento_tipo_evento_id", fields: [tipo_evento_id], references: [id])
  editor                 User                  @relation("evento_editor_id", fields: [user_edit_id], references: [id])
  autor                  User                  @relation("evento_autor_id", fields: [user_id], references: [id])
  eventos_has_asistencia EventoHasAsistencia[]

  @@map("eventos")
}

model EventoHasAsistencia {
  id         String    @id @default(uuid())
  asistio    Boolean
  created_at DateTime  @default(now())
  deleted_at DateTime?
  evento_id  String
  people_id  String
  updated_at DateTime
  evento     Evento    @relation(fields: [evento_id], references: [id])
  persona    Persona   @relation(fields: [people_id], references: [id])

  @@map("eventos_has_asistencias")
}

model Iglesia {
  id               String           @id @default(uuid())
  name             String           @db.VarChar(200)
  email            String           @db.VarChar(200)
  direccion        String
  telefonos        String           @db.VarChar(100)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  Evento           Evento[]
  eventos          Evento[]         @relation("evento_iglesia_id")
  Familia          Familia[]
  membresia        Membresia[]
  persona          Persona[]
  users            User[]
  users_has_church UsersHasChurch[]

  @@map("iglesias")
}

model Membresia {
  id            String        @id @default(uuid())
  fecha         DateTime
  tipo_id       Int
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  persona_id    String
  activo        Boolean       @default(false)
  iglesia_id    String
  user_id       String
  iglesia       Iglesia       @relation(fields: [iglesia_id], references: [id])
  persona       Persona       @relation(fields: [persona_id], references: [id])
  tipoMembresia TipoMembresia @relation(fields: [tipo_id], references: [id])
  user          User          @relation(fields: [user_id], references: [id])

  @@unique([persona_id, iglesia_id])
  @@map("membresias")
}

model Municipio {
  id              Int          @id @default(autoincrement())
  name            String       @unique @db.VarChar(60)
  departamento_id Int
  barrios         Barrio[]     @relation("barrio_municipio_id")
  departamento    Departamento @relation(fields: [departamento_id], references: [id])

  @@map("municipios")
}

model Pais {
  id            Int            @id @default(autoincrement())
  name          String         @unique @db.VarChar(60)
  departamentos Departamento[]

  @@map("paises")
}

model Persona {
  id                  String                @id @default(uuid())
  nombres             String                @db.VarChar(60)
  apellidos           String                @db.VarChar(60)
  cedula              String?               @db.VarChar(20)
  fecha_nacimiento    DateTime?
  fecha_fe            DateTime?
  fecha_bautizo       DateTime?
  sexo_id             Int
  direccion           String
  telefono            String?               @db.VarChar(10)
  user_id             String
  editor_id           String?
  estado_civil_id     Int
  email               String?               @db.VarChar(100)
  barrio_id           Int
  created_at          DateTime              @default(now())
  updated_at          DateTime?             @updatedAt
  iglesia_id          String
  bajas               Baja[]                @relation("baja_persona_id")
  eventoHasAsistencia EventoHasAsistencia[]
  familia             FamiliaHasPersona?
  membresia           Membresia[]
  barrio              Barrio                @relation("persona_barrio_id", fields: [barrio_id], references: [id])
  editor              User?                 @relation("persona_editor_id", fields: [editor_id], references: [id])
  estadoCivil         EstadoCivil           @relation(fields: [estado_civil_id], references: [id])
  iglesia             Iglesia               @relation(fields: [iglesia_id], references: [id])
  sexo                Sexo                  @relation(fields: [sexo_id], references: [id])
  autor               User                  @relation("persona_autor_id", fields: [user_id], references: [id])
  grupos_has_personas GrupoHasPersona[]

  @@map("personas")
}

model Post {
  id           String         @id @default(uuid())
  title        String
  slug         String         @unique
  content      String
  published    Boolean        @default(false)
  user_id      String
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  categoria_id Int
  userId       String?
  categoria    Categoria      @relation(fields: [categoria_id], references: [id])
  User         User?          @relation(fields: [userId], references: [id])
  users        User           @relation("post_autor_id", fields: [user_id], references: [id])
  postHasImage PostHasImage[]

  @@map("posts")
}

model PostHasImage {
  id      String @id @default(uuid())
  url     String
  post_id String
  posts   Post   @relation(fields: [post_id], references: [id])

  @@map("posts_has_images")
}

model Roles {
  id             Int            @id @default(autoincrement())
  name           String         @unique @db.VarChar(60)
  users_has_role UsersHasRole[]

  @@map("roles")
}

model Sexo {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(20)
  personas Persona[]

  @@map("sexos")
}

model TipoEvento {
  id      Int      @id @default(autoincrement())
  name    String   @unique @db.VarChar(60)
  Evento  Evento[]
  eventos Evento[] @relation("evento_tipo_evento_id")

  @@map("tipos_eventos")
}

model TipoMembresia {
  id            Int         @id @default(autoincrement())
  tipo_mebresia String      @db.VarChar(60)
  membresias    Membresia[]

  @@map("tipos_membresias")
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique @db.VarChar(200)
  password          String
  name              String              @db.VarChar(100)
  iglesia_id        String
  activo            Boolean             @default(true)
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  bajaEditor        Baja[]              @relation("baja_editor_user_id")
  bajaAutor         Baja[]              @relation("baja_autor_user_id")
  eventoEditor      Evento[]            @relation("evento_editor_id")
  eventoAutor       Evento[]            @relation("evento_autor_id")
  familia_editor    Familia[]           @relation("familia_user_edit_id")
  familia_autor     Familia[]           @relation("familia_user_id")
  FamiliaHasPersona FamiliaHasPersona[]
  Membresia         Membresia[]
  PersonaEditor     Persona[]           @relation("persona_editor_id")
  personaAutor      Persona[]           @relation("persona_autor_id")
  Post              Post[]
  posts             Post[]              @relation("post_autor_id")
  iglesias          Iglesia             @relation(fields: [iglesia_id], references: [id])
  userHasChurch     UsersHasChurch[]
  userHasRole       UsersHasRole[]

  @@map("users")
}

model UsersHasChurch {
  id         String  @id @default(uuid())
  user_id    String
  iglesia_id String
  iglesias   Iglesia @relation(fields: [iglesia_id], references: [id])
  users      User    @relation(fields: [user_id], references: [id])

  @@map("users_has_church")
}

model UsersHasRole {
  user_id    String
  role_id    Int
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  deleted_at DateTime?
  updated_at DateTime? @updatedAt
  roles      Roles     @relation(fields: [role_id], references: [id])
  users      User      @relation(fields: [user_id], references: [id])

  @@map("users_has_roles")
}

model ZonaGeografica {
  id      Int      @id @default(autoincrement())
  name    String   @unique @db.VarChar(60)
  barrios Barrio[]

  @@map("zonas_geograficas")
}

model Familia {
  id           String              @id @default(uuid())
  name         String
  iglesia_id   String
  user_id      String
  user_edit_id String
  created_at   DateTime            @default(now())
  updated_at   DateTime            @updatedAt
  iglesia      Iglesia             @relation(fields: [iglesia_id], references: [id])
  editor       User                @relation("familia_user_edit_id", fields: [user_edit_id], references: [id])
  user         User                @relation("familia_user_id", fields: [user_id], references: [id])
  miembros     FamiliaHasPersona[]
  parentescoId Int?

  @@map("familias")
}

model Parentesco {
  id              Int                 @id @default(autoincrement())
  parentesco      String              @unique @db.VarChar(60)
  miembro_familia FamiliaHasPersona[]

  @@map("parentescos")
}

model FamiliaHasPersona {
  id            String      @id @default(uuid())
  familia_id    String
  persona_id    String      @unique
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  user_id       String
  parentesco_id Int
  familia       Familia     @relation(fields: [familia_id], references: [id])
  persona       Persona     @relation(fields: [persona_id], references: [id])
  user          User        @relation(fields: [user_id], references: [id])
  parentesco    Parentesco? @relation(fields: [parentesco_id], references: [id])

  @@unique([familia_id, persona_id])
  @@map("familias_has_personas")
}

model Grupo {
  id         Int               @id @default(autoincrement())
  grupo      String            @unique
  lider_id   String
  iglesia_id String
  user_id    String
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  miembros   GrupoHasPersona[]

  @@map("grupos")
}

model GrupoHasPersona {
  id         String   @id @default(uuid())
  grupo_id   Int
  persona_id String
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  grupo      Grupo    @relation(fields: [grupo_id], references: [id])
  persona    Persona  @relation(fields: [persona_id], references: [id])

  @@unique([grupo_id, persona_id])
  @@map("grupos_has_personas")
}
