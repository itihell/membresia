// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  password    String
  name        String
  UserHasRole UserHasRole[]
  churchId    String?

  Autor         People[]        @relation(name: "Autor")
  Editor        People[]        @relation(name: "Editor")
  AutorBaja     Bajas[]         @relation(name: "Autor")
  EditorBaja    Bajas[]         @relation(name: "Editor")
  UserHasChurch UserHasChurch[]
  post          Post[]
  Eventos       Eventos[]

  @@map("user")
}

model Role {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  UserHasRole UserHasRole[]

  @@map("role")
}

model UserHasRole {
  userId String
  roleId Int

  User User @relation(fields: [userId], references: [id])
  Role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("user_has_role")
}

model Sexo {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  People People[]

  @@map("sexos")
}

model EstadoCivil {
  id           Int      @id @default(autoincrement())
  estado_civil String   @unique
  People       People[]

  @@map("estado_civil")
}

model People {
  id               String    @id @default(uuid())
  nombres          String
  apellidos        String
  cedula           String    @unique
  fecha_nacimiento DateTime
  fecha_fe         DateTime?
  fecha_bautizo    DateTime?
  sexoId           Int
  direccion        String
  telefono         String?
  userId           String
  editorId         String?
  estado_civilId   Int
  email            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relaciones
  sexo        Sexo        @relation(fields: [sexoId], references: [id])
  autor       User        @relation(name: "Autor", fields: [userId], references: [id])
  editor      User?       @relation(name: "Editor", fields: [editorId], references: [id])
  estadoCivil EstadoCivil @relation(fields: [estado_civilId], references: [id])
  membresia   Membresia[]
  bajas       Bajas[]

  @@map("people")
}

model Membresia {
  id        String   @id @default(uuid())
  peopleId  String
  fecha     DateTime
  tipoId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  people People        @relation(fields: [peopleId], references: [id])
  tipo   TipoMembresia @relation(fields: [tipoId], references: [id])

  @@map("membresia")
}

model TipoMembresia {
  id            Int         @id @default(autoincrement())
  tipo_mebresia String
  membresia     Membresia[]

  @@map("tipo_membresia")
}

model Baja {
  id       String   @id @default(uuid())
  peopleId String
  fecha    DateTime
  motivo   String
  userId   String
  editorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  people People @relation(fields: [peopleId], references: [id])
  autor  User   @relation(name: "Autor", fields: [userId], references: [id])
  editor User?  @relation(name: "Editor", fields: [editorId], references: [id])

  @@map("bajas")
}

model Church {
  id      String @id @default(uuid())
  name    String
  address String
  phone   String
  email   String

  userHasChurch UserHasChurch[]
  Eventos       Eventos[]

  @@map("church")
}

model UserHasChurch {
  id       Int    @id @default(autoincrement())
  userId   String
  churchId String

  user   User   @relation(fields: [userId], references: [id])
  church Church @relation(fields: [churchId], references: [id])

  // @@id([userId, churchId])
  @@map("user_has_church")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
  post Post[]

  @@map("category")
}

model Post {
  id           String         @id @default(uuid())
  title        String
  slug         String         @unique
  content      String
  published    Boolean        @default(false)
  userId       String
  categoryId   Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id])
  category     Category       @relation(fields: [categoryId], references: [id])
  postHasImage PostHasImage[]

  @@map("post")
}

model Eventos {
  id          String   @id @default(uuid())
  title       String
  description String?
  date        DateTime
  location    String
  userId      String
  churchId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  church Church @relation(fields: [churchId], references: [id])

  @@map("eventos")
}

model PostHasImage {
  id     Int    @id @default(autoincrement())
  url    String
  postId String

  post Post @relation(fields: [postId], references: [id])

  @@map("post_has_image")
}
