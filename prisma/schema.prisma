// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique @db.VarChar(200)
  password  String
  name      String   @db.VarChar(100)
  iglesiaId String?  @map("iglesia_id")
  activo    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones

  UserHasRole   UsersHasRole[]
  Autor         Persona[]       @relation(name: "Autor")
  Editor        Persona[]       @relation(name: "Editor")
  AutorBaja     Baja[]          @relation(name: "Autor")
  EditorBaja    Baja[]          @relation(name: "Editor")
  UserHasChurch UserHasChurch[]
  posts         Post[]
  Eventos       Eventos[]
  iglesia       Iglesia?        @relation(fields: [iglesiaId], references: [id])

  @@map("users")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(60)

  // Relaciones
  UserHasRole UsersHasRole[]

  @@map("roles")
}

model Estado {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(20)

  // Relaciones

  @@map("estados")
}

model UsersHasRole {
  userId String @map("user_id")
  roleId Int    @map("role_id")

  // Relaciones

  User User @relation(fields: [userId], references: [id])
  Role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("users_has_role")
}

model Sexo {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(20)

  // Relaciones
  People Persona[]

  @@map("sexos")
}

model EstadoCivil {
  id          Int    @id @default(autoincrement())
  estadoCivil String @unique @map("estado_civil")

  // Relaciones
  People Persona[]

  @@map("estados_civil")
}

model Pais {
  id            Int            @id @default(autoincrement())
  name          String         @unique @db.VarChar(60)
  Departamentos Departamento[]

  @@map("paises")
}

model Departamento {
  id     Int    @id @default(autoincrement())
  name   String @unique @db.VarChar(60)
  paisId Int    @map("pais_id")

  // Relaciones
  pais       Pais        @relation(fields: [paisId], references: [id])
  Municipios Municipio[]

  @@map("departamentos")
}

model Municipio {
  id             Int    @id @default(autoincrement())
  name           String @unique @db.VarChar(60)
  departamentoId Int    @map("departamento_id")

  // Relaciones
  departamento Departamento @relation(fields: [departamentoId], references: [id])
  Barrio       Barrio[]

  @@map("municipios")
}

model ZonaGeografica {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(60)

  // Relaciones
  Barrio Barrio[]

  @@map("zonas_geograficas")
}

model Barrio {
  id               Int    @id @default(autoincrement())
  name             String @unique @db.VarChar(60)
  municipioId      Int    @map("municipio_id")
  zonaGeograficaId Int    @map("zona_geografica_id")

  // Relaciones
  municipio      Municipio       @relation(fields: [municipioId], references: [id])
  ZonaGeografica ZonaGeografica? @relation(fields: [zonaGeograficaId], references: [id])
  Persona        Persona[]

  @@map("barrios")
}

model Persona {
  id              String    @id @default(uuid())
  nombres         String    @db.VarChar(60)
  apellidos       String    @db.VarChar(60)
  cedula          String    @unique @db.VarChar(20)
  fechaNacimiento DateTime  @map("fecha_nacimiento")
  fechaFe         DateTime? @map("fecha_fe")
  fechaBautizo    DateTime? @map("fecha_bautizo")
  sexoId          Int       @map("sexo_id")
  barrioId        Int       @map("barrio_id")
  direccion       String
  telefono        String?   @db.VarChar(10)
  userId          String    @map("user_id")
  editorId        String?   @map("editor_id")
  estadoCivilId   Int       @map("estado_civil_id")
  email           String?   @db.VarChar(100)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relaciones
  sexo                Sexo                   @relation(fields: [sexoId], references: [id])
  autor               User                   @relation(name: "Autor", fields: [userId], references: [id])
  editor              User?                  @relation(name: "Editor", fields: [editorId], references: [id])
  estadoCivil         EstadoCivil            @relation(fields: [estadoCivilId], references: [id])
  membresia           Membresia[]
  bajas               Baja[]
  EventoHasAsistencia EventosHasAsistencia[]
  barrio              Barrio                 @relation(fields: [barrioId], references: [id])

  @@map("personas")
}

model Membresia {
  id        String   @id @default(uuid())
  peopleId  String   @map("people_id")
  fecha     DateTime
  tipoId    Int      @map("tipo_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones
  people Persona       @relation(fields: [peopleId], references: [id])
  tipo   TipoMembresia @relation(fields: [tipoId], references: [id])

  @@map("membresias")
}

model TipoMembresia {
  id           Int    @id @default(autoincrement())
  tipoMebresia String @map("tipo_mebresia") @db.VarChar(60)

  // Relaciones
  membresia Membresia[]

  @@map("tipos_membresia")
}

model Baja {
  id       String   @id @default(uuid())
  peopleId String   @map("people_id")
  fecha    DateTime
  motivo   String
  userId   String   @map("user_id")
  editorId String?  @map("editor_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  people Persona @relation(fields: [peopleId], references: [id])
  autor  User    @relation(name: "Autor", fields: [userId], references: [id])
  editor User?   @relation(name: "Editor", fields: [editorId], references: [id])

  @@map("bajas")
}

model Iglesia {
  id        String @id @default(uuid())
  name      String @db.VarChar(200)
  direccion String
  telefonos String @db.VarChar(100)
  email     String @db.VarChar(200)

  // Relaciones
  userHasChurch UserHasChurch[]
  Eventos       Eventos[]
  User          User[]

  @@map("iglesias")
}

model UserHasChurch {
  id        Int    @id @default(autoincrement())
  userId    String @map("user_id")
  iglesiaId String @map("iglesia_id")

  // Relaciones
  user    User    @relation(fields: [userId], references: [id])
  iglesia Iglesia @relation(fields: [iglesiaId], references: [id])

  // @@id([userId, churchId])
  @@map("users_has_church")
}

model Categoria {
  id   Int    @id @default(autoincrement())
  name String @unique

  // Relaciones
  post Post[]

  @@map("categorias")
}

model Post {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  content     String
  published   Boolean  @default(false)
  userId      String   @map("user_id")
  categoriaId Int      @map("categoria_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relaciones
  user         User           @relation(fields: [userId], references: [id])
  categoria    Categoria      @relation(fields: [categoriaId], references: [id])
  postHasImage PostHasImage[]

  @@map("posts")
}

model TipoEvento {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(60)

  // Relaciones
  Eventos Eventos[]

  @@map("tipos_evento")
}

model Eventos {
  id           String    @id @default(uuid())
  title        String
  description  String?
  date         DateTime
  location     String
  userId       String    @map("user_id")
  iglesiaId    String    @map("iglesia_id")
  tipoEventoId Int       @map("tipo_evento_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  // Relaciones
  user                 User                   @relation(fields: [userId], references: [id])
  iglesia              Iglesia                @relation(fields: [iglesiaId], references: [id])
  EventosHasAsistencia EventosHasAsistencia[]
  TipoEvento           TipoEvento             @relation(fields: [tipoEventoId], references: [id])

  @@map("eventos")
}

model EventosHasAsistencia {
  id        Int       @id @default(autoincrement())
  eventoId  String    @map("evento_id")
  peopleId  String    @map("people_id")
  asistio   Boolean
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relaciones
  evento Eventos @relation(fields: [eventoId], references: [id])
  people Persona @relation(fields: [peopleId], references: [id])

  @@map("eventos_has_asistencia")
}

model PostHasImage {
  id     Int    @id @default(autoincrement())
  url    String
  postId String @map("post_id")

  // Relaciones
  post Post @relation(fields: [postId], references: [id])

  @@map("posts_has_image")
}
